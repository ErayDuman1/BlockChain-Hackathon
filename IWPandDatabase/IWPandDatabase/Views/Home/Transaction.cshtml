@model IWPandDatabase.Models.Transaction

@{
    ViewBag.Title = "Transaction";

}

<h2>Transaction</h2>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<link rel="stylesheet" href="~/Content/bootstrap.min.css">
<link rel="stylesheet" href="~/Content/public-key-private-key.css">
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/popper.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="~/Scripts/js.cookie.min.js"></script>
<script src="~/Scripts/BigInteger.min.js"></script>
<script src="~/Scripts/Buffer.js"></script>
<script src="~/Scripts/elliptic.js"></script>
<script src="~/Scripts/spin.min.js"></script>
<script src="~/Scripts/ladda.min.js"></script>
<script src="~/Scripts/sha256.js"></script>
<script src="~/Scripts/blockchain.js"></script>
<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
<script>
    var EC = elliptic.elliptic().ec;
    var ec = new EC('secp256k1');

    var keypair = ec.genKeyPair();
    if (Cookies.get('privateKey')) {
        keypair = ec.keyFromPrivate(Cookies.get('privateKey'));
    }

    function update() {
        var prv = keypair.getPrivate('hex');
        var pub = keypair.getPublic('hex');
        $('#privateKey').val(bigInt(prv, 16).toString());
        $('#sign-from').val(pub);
        $('#verify-from').val(pub);
        Cookies.set('privateKey', prv.toString());
        Cookies.set('publicKey', pub);
    }

    function resetVerifier() {
        $('#card').removeClass('alert-success');
        $('#card').removeClass('alert-danger');
    }

    $(function () {
        $('#sign-button').click(function () {
            var message = $('#sign-amount').val() + $('#sign-from').val() + $('#sign-to').val();
            var binaryMessage = buffer.Buffer.from(CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex));
            var hexSignature = buffer.Buffer.from(keypair.sign(binaryMessage).toDER()).toString('hex');
            $('#sign-signature').val(hexSignature);
            $('#verify-signature').val(hexSignature);
            update();
            resetVerifier();
        });
        $('#verify-button').click(function () {

            // verify by using only the public key
            $('#verify-from').val($('#verify-from').val().replace(/[^0-9a-fA-F]/g, ''));
            var tmpKey;
            try {
                tmpKey = ec.keyFromPublic($('#verify-from').val(), 'hex');
                var message = $('#verify-amount').val() + $('#verify-from').val() + $('#verify-to').val();
                var binaryMessage = buffer.Buffer.from(CryptoJS.SHA256(message).toString(CryptoJS.enc.Hex));
                if (tmpKey.verify(binaryMessage, $('#verify-signature').val())) {
                    $('#card').addClass('alert-success');
                }
                else {
                    $('#card').addClass('alert-danger');
                }
            }
            catch (e) {
                $('#card').addClass('alert-danger');
            }
        });
        $('#sign-signature').bind('keyup', function () {
            resetVerifier();
        });
        $('#sign-amount').bind('keyup', function () {
            resetVerifier();
        });
        $('#sign-from').bind('keyup', function () {
            resetVerifier();
        });
        $('#sign-to').bind('keyup', function () {
            resetVerifier();
        });
        $('#verify-signature').bind('keyup', function () {
            resetVerifier();
        });
        $('#verify-amount').bind('keyup', function () {
            resetVerifier();
        });
        $('#verify-from').bind('keyup', function () {
            resetVerifier();
        });
        $('#verify-to').bind('keyup', function () {
            resetVerifier();
        });
        $('#publicKey').bind('keyup', function () {
            resetVerifier();
        });
        $('#privateKey').bind('keyup', function () {
            $('#privateKey').val($('#privateKey').val().replace(/\D/g, ''));
            keypair = ec.keyFromPrivate(bigInt($('#privateKey').val()).toString(16));
            resetVerifier();
            update();
        });
        if (Cookies.get('amount')) {
            $('#sign-amount').val(Cookies.get('amount'));
            $('#verify-amount').val(Cookies.get('amount'));
        }
        if (Cookies.get('amount')) {
            $('#sign-from').val(Cookies.get('from'));
            $('#verify-from').val(Cookies.get('from'));
        }
        if (Cookies.get('amount')) {
            $('#sign-to').val(Cookies.get('to'));
            $('#verify-to').val(Cookies.get('to'));
        }
        $('#sign-amount').bind('keyup', function () {
            Cookies.set('amount', $('#sign-amount').val());
            $('#verify-amount').val($('#sign-amount').val());
        });
        $('#sign-from').bind('keyup', function () {
            Cookies.set('from', $('#sign-from').val());
            $('#verify-from').val($('#sign-from').val());
        });
        $('#sign-to').bind('keyup', function () {
            Cookies.set('to', $('#sign-to').val());
            $('#verify-to').val($('#sign-to').val());
        });
        $('#verify-amount').bind('keyup', function () {
            Cookies.set('amount', $('#verify-amount').val());
            $('#sign-amount').val($('#verify-amount').val());
        });
        $('#verify-from').bind('keyup', function () {
            Cookies.set('from', $('#verify-from').val());
            $('#sign-from').val($('#verify-from').val());
        });
        $('#verify-to').bind('keyup', function () {
            Cookies.set('to', $('#verify-to').val());
            $('#sign-to').val($('#verify-to').val());
        });
        $('#myTab').on('shown.bs.tab', function (e) {
            resetVerifier();
        });
        update();
    });</script>


@using (Html.BeginForm())
{
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h4>Transaction</h4>
                <ul class="nav nav-tabs card-header-tabs" id="myTab" role="tablist">
                    <li class="nav-item"><a class="nav-link active" id="sign-tab" data-toggle="tab" href="#sign" role="tab" aria-controls="sign" aria-selected="true">Sign</a></li>
                    <li class="nav-item"><a class="nav-link" id="verify-tab" data-toggle="tab" href="#verify" role="tab" aria-controls="verify" aria-selected="false">Verify</a></li>
                </ul>
            </div>
            <div class="card-body" id="card">
                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane show active" id="sign" role="tabpanel" aria-labelledby="sign-tab">
                        <form class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label" for="data">Message</label>
                                <div class="input-group">
                                    <div class="input-group-addon">$</div>
                                    <div class="col-md">
                                        @Html.EditorFor(model => model.Message, new { htmlAttributes = new { @id = "sign-amount", @class = "form-control", @Value = 20.00 } })
                                        @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="input-group-addon">From:</div>
                                    <div class="col-md">
                                        @Html.EditorFor(model => model.Sender, new { htmlAttributes = new { @id = "sign-from", @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Sender, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="input-group-addon">-&gt;</div>
                                    <div class="col-md">
                                        @Html.EditorFor(model => model.Sent, new { htmlAttributes = new { @id = "sign-to", @Value = "04cc955bf8e359cc7ebbb66f4c2dc616a93e8ba08e93d27996e20299ba92cba9cbd73c2ff46ed27a3727ba09486ba32b5ac35dd20c0adec020536996ca4d9f3d74", @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Sent, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="data">Private Key</label>
                                <div class="col-md">
                                    @Html.EditorFor(model => model.PrivateKey, new { htmlAttributes = new { @id = "privateKey", @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.PrivateKey, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-offset col-md">
                                    <input type="submit" value="Sign" id="sign-button" class="btn btn-default" />
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="data">Message Signature</label>
                                <div class="col-md">
                                    @Html.EditorFor(model => model.MessageSignature, new { htmlAttributes = new { @id = "sign-signature", @class = "form-control", } })
                                    @Html.ValidationMessageFor(model => model.MessageSignature, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="tab-pane" id="verify" role="tabpanel" aria-labelledby="verify-tab">
                        <form class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label" for="data">Message</label>
                                <div class="input-group">
                                    <div class="input-group-addon">$</div>
                                    <div class="col-md">
                                        @Html.EditorFor(model => model.verifyAmount, new { htmlAttributes = new { @id = "verify-amount", @Value = "20.00", @class = "form-control", } })
                                        @Html.ValidationMessageFor(model => model.verifyAmount, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="input-group-addon">From:</div>
                                    <div class="col-md">
                                        @Html.EditorFor(model => model.verifySender, new { htmlAttributes = new { @id = "verify-from", @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.verifySender, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="input-group-addon">-&gt;</div>
                                    <div class="col-md">
                                        @Html.EditorFor(model => model.verifySent, new { htmlAttributes = new { @id = "verify-to", @Value = "04cc955bf8e359cc7ebbb66f4c2dc616a93e8ba08e93d27996e20299ba92cba9cbd73c2ff46ed27a3727ba09486ba32b5ac35dd20c0adec020536996ca4d9f3d74", @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.verifySent, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="data">Signature</label>
                                <div class="col-md">
                                    @Html.EditorFor(model => model.verifySignature, new { htmlAttributes = new { @id = "verify-signature", @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.verifySignature, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-offset col-md">
                                    <input type="submit" value="Verify" id="verify-button" class="btn btn-default" />
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
